---

- name: "Add multiverse repositories"
  sudo: "yes"
  apt_repository: "repo='{{ item }}' state=present"
  with_items:
    - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }} multiverse"
    - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }}-security universe"
    - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }}-updates multiverse"

- name: "Create subdirectories for archivematica-mcp-client source files"
  file:
    dest: "{{ item }}"
    state: "directory"
  with_items:
    - "/etc/archivematica"
    - "/usr/lib/archivematica"

- name: "Copy archivematica-mcp-client source files"
  file: src={{ item.src }} dest={{ item.dest }} state=link
  with_items:
    - src: "{{ archivematica_src_dir }}/archivematica/src/MCPClient/etc"
      dest: "/etc/archivematica/MCPClient"
    - src: "{{ archivematica_src_dir }}/archivematica/src/MCPClient/lib/"
      dest: "/usr/lib/archivematica/MCPClient"
    - src: "{{ archivematica_src_dir }}/archivematica/src/MCPClient/init/archivematica-mcp-client.conf"
      dest: "/etc/init/archivematica-mcp-client.conf"

- name: "Copy archivematica-mcp-client init service"
  file: src={{ item.src }} dest={{ item.dest }} state=link
  with_items:
    - src: "{{ archivematica_src_dir }}/archivematica/src/MCPClient/init/archivematica-mcp-client.conf"
      dest: "/etc/init/archivematica-mcp-client.conf"

- name: "Reload Upstart configuration"
  command: "initctl reload-configuration"

- name: "Install archivematica-mcp-client package dependencies"
  apt:
    pkg: "{{ item }}"
    state: "latest"
  with_items:
    - "atool"
    - "bagit"
    - "bulk-extractor"
    - "clamav"
    - "clamav-daemon"
    - "ffmpeg"
    - "fits"
    - "gearman"
    - "imagemagick"
    - "inkscape"
    - "jhove"
    - "libimage-exiftool-perl"
    - "libxml2-utils"
    - "logapp"
    - "md5deep"
    - "mediainfo"
    - "nfs-common"
    - "openjdk-7-jre-headless"
    - "p7zip-full"
    - "pbzip2"
    - "postfix"
    - "python-fido"
    - "python-gearman"
    - "python-lxml"
    - "python-mysqldb"
    - "python-pyicu"
    - "python-unidecode"
    - "readpst"
    - "rsync"
    - "siegfried"
    - "sleuthkit"
    - "tesseract-ocr"
    - "tika"
    - "tree"
    - "ufraw"
    - "unrar-free"
    - "uuid"

- name: "Create archivematica-mcp-client log directories"
  file:
    dest: "{{ item }}"
    state: "directory"
    owner: "archivematica"
    group: "archivematica"
    mode: "g+s"
  with_items:
    - "/var/log/archivematica/MCPClient"


# crontab seems not required for freshclam updates
# freshclam is executed hourly by default (clamav-freshclam)
#- name: "Daily clamav database update"
#  cron:
#    name: "Daily clamav database update"
#    hour: "2"
#    minute: "0"
#    job: "/usr/bin/freshclam"
#    state: "present"

# Have found that installation often stalls in freshclam
# Will download signatures from our repo to try to avoid this

#- name: "Download clamav signatures"
#  command: "freshclam"


# check if clamav files exist already
- stat: path=/var/lib/clamav/bytecode.cvd
  register: clamf1
- stat: path=/var/lib/clamav/bytecode.cld
  register: clamf1a

- stat: path=/var/lib/clamav/daily.cvd
  register: clamf2
- stat: path=/var/lib/clamav/daily.cld
  register: clamf2a

- stat: path=/var/lib/clamav/main.cvd
  register: clamf3
- stat: path=/var/lib/clamav/main.cld
  register: clamf3a

- set_fact:
    clamav_download: "{{ not ( ( clamf1.stat.exists or clamf1a.stat.exists ) and
                               ( clamf2.stat.exists or clamf2a.stat.exists ) and
                               ( clamf3.stat.exists or clamf3a.stat.exists ) ) }}"
- debug: msg="Need to download clamav signatures"
  when: clamav_download

- name: "Get clamav signatures from our github repo"
  git:
    repo=https://github.com/artefactual-labs/clamav-files.git
    dest=/tmp/clamav-files
  when: clamav_download
- name: "Copy clamav signatures to /var/lib/clamav"
  command: cp /tmp/clamav-files/{{ item }} /var/lib/clamav/
  sudo: yes
  with_items:
    - bytecode.cvd
    - daily.cvd
    - main.cvd
  when: clamav_download

- name: "Set user ownership for clamav files"
  file:
    path=/var/lib/clamav
    owner=clamav
    group=clamav
    state=directory
    recurse=yes
  when: clamav_download

- name: "Enable services"
  service:
    name: "{{ item }}"
    state: "started"
    enabled: "yes"
  with_items:
    - "fits"
    - "clamav-daemon"
